{"version":3,"sources":["Buttons.js","ShowHoursToday.js","App.js","serviceWorker.js","index.js"],"names":["StartButton","_ref","startTimer","react_default","a","createElement","className","onClick","StopButton","_ref2","stopTimer","ResetButton","_ref3","resetTimer","LogButton","_ref4","logHours","ShowHoursToday","secondsToday","hours","Math","floor","minutes","seconds","time","concat","String","padStart","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","startTime","Date","getTime","localStorage","setItem","state","dateToday","setState","restoreButtons","disableButtons","end","secondsWorkedToday","undefined","getTodaysDate","dateArray","toDateString","split","shift","join","_len","arguments","length","Array","_key","forEach","name","document","querySelector","setAttribute","_len2","_key2","removeAttribute","getItem","Number","forceLog","Buttons_StartButton","Buttons_StopButton","Buttons_LogButton","Buttons_ResetButton","src_ShowHoursToday","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.61f379f4.chunk.js","sourcesContent":["import React from 'react';\n\nconst StartButton = ({startTimer}) => {\n  return (\n    <button\n      className='start button'\n      onClick={startTimer}>\n      Start\n    </button>\n  )\n}\n\nconst StopButton = ({stopTimer}) => {\n  return (\n    <button\n      className='stop button'\n      onClick={stopTimer}>\n      Stop\n    </button>\n  )\n}\n\nconst ResetButton = ({resetTimer}) => {\n  return (\n    <button\n      className='reset button'\n      onClick={resetTimer}\n    >\n      Reset\n    </button>\n  )\n}\n\nconst LogButton = ({logHours}) => {\n  return (\n    <button\n      className='log button'\n      onClick={logHours}\n    >\n      Log Hours\n    </button>\n  )\n}\n\nexport {StartButton, StopButton, ResetButton, LogButton}\n","import React from 'react'\nconst HOURS_DIVIDER = 3600\nconst MINUTES_DIVIDER = 60\n\n\nconst ShowHoursToday = ({secondsToday}) => {\n  let hours = Math.floor(secondsToday / HOURS_DIVIDER) || 0\n  let minutes = Math.floor((secondsToday - (hours * HOURS_DIVIDER)) / MINUTES_DIVIDER) || 0\n  let seconds = Math.floor((secondsToday - (minutes * MINUTES_DIVIDER))) || 0\n  let time = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`\n  return (\n    <div className=\"today\">\n      <p>Hours worked today: {time}</p>\n    </div>\n  )\n}\n\nexport default ShowHoursToday;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { StartButton, StopButton, ResetButton, LogButton } from './Buttons';\nimport ShowHoursToday from './ShowHoursToday';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dateToday: localStorage.getItem('dateToday') || this.getTodaysDate(),\n      secondsToday: Number(localStorage.getItem('secondsToday')) || 0,\n      startTime: Number(localStorage.getItem('startTime')) || undefined,\n      forceLog: false\n    }\n\n  }\n\n  componentDidMount() {\n    if (this.state.forceLog) {\n      this.disableButtons([\".start\", \".stop\", \".reset\"])\n    } else if (this.state.startTime) {\n      this.disableButtons([\".start\", \".log\", \".reset\"])\n    } else if (this.state.secondsToday === 0) {\n      this.disableButtons([\".log\", \".reset\", \".stop\"])\n    } else {\n      this.disableButtons([\".stop\"])\n    }\n    if (this.state.dateToday !== this.getTodaysDate()) {\n      this.setState({forceLog: true})\n    }\n  }\n\n  startTimer = (e) => {\n    let startTime = new Date().getTime();\n    localStorage.setItem('startTime', startTime)\n    localStorage.setItem('dateToday', this.state.dateToday)\n    this.setState({startTime: startTime})\n    this.restoreButtons([\".stop\"]);\n    this.disableButtons([\".start\", \".log\", \".reset\"]);\n  }\n\n  stopTimer = (e) => {\n    let end = new Date().getTime()\n    // adding seconds to hoursToday\n    let secondsWorkedToday = this.state.secondsToday\n    secondsWorkedToday += (end - this.state.startTime) / 1000\n    this.setState(\n      {\n        secondsToday: secondsWorkedToday,\n        startTime: undefined\n      }, () => {\n        localStorage.setItem('startTime', undefined)\n        localStorage.setItem('secondsToday', this.state.secondsToday)\n      }\n    )\n    this.restoreButtons([\".start\", \".log\", \".reset\"]);\n    this.disableButtons([\".stop\"]);\n  }\n\n  resetTimer = (e) => {\n    localStorage.setItem('startTime', undefined);\n    localStorage.setItem('secondsToday', 0)\n    this.setState({\n      secondsToday: 0,\n      startTime: undefined\n    }, () => this.disableButtons([\".stop\", \".log\", \".reset\"]))\n  }\n\n  logHours = () => {\n    // hook up to data base\n    localStorage.setItem('secondsToday', 0)\n    this.setState({secondsToday: 0}, () => this.disableButtons([\".stop\", \".log\", \".reset\"]))\n  }\n\n  getTodaysDate = () => {\n    let dateArray = new Date().toDateString().split(\" \")\n    dateArray.shift();\n    return dateArray.join(' ');\n  }\n\n  disableButtons = (...[args]) => {\n    args.forEach(name => {\n      document.querySelector(name).setAttribute(\"disabled\", true)\n    })\n  }\n\n  restoreButtons = (...[args]) => {\n    args.forEach(name => {\n      document.querySelector(name).removeAttribute(\"disabled\")\n    })\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <h1 className='f1 tc heading'>Hours Worked Tracker</h1>\n        <h2 className='f2 tc heading'>{this.getTodaysDate()}</h2>\n        <div className=\"actions\">\n          <StartButton startTimer={this.startTimer} />\n          <StopButton stopTimer={this.stopTimer} />\n          <LogButton logHours={this.logHours} />\n          <ResetButton resetTimer={this.resetTimer}/>\n        </div>\n        <div className='history tc'>\n          <ShowHoursToday secondsToday={this.state.secondsToday} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}